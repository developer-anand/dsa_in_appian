# Q 1 # 
Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.

Example 1: Input: nums = [1, 2, 3, 3]

Output: true

Solution in appian

a!localVariables(
  local!data: { 1, 2, 3, 4, 3, 5, 6, 5, 4, 7 },
  local!duplicate: a!forEach(
    items: local!data,
    expression: if(
      length(wherecontains(fv!item, local!data)) > 1,
      fv!item,
      {}
    )
  ),
  union(local!duplicate, local!duplicate)
)


/* Q 2 */

Is Anagram
Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Example 1:

Input: s = "racecar", t = "carrace"

Output: true
Example 2:

Input: s = "jar", t = "jam"

Output: false

a!localVariables(
  local!str1: "racecar",
  local!str2:"carrace",
 /* Creating a Map to store the character and their ASCII for str1 */
  local!mapofString1: a!forEach(
    items: enumerate(len(local!str1)),
    expression: a!map(id:local!str1[fv!item+1],ASCII:cast(1,code(local!str1[fv!item+1])))
  ),
/* Creating a Map to store the character and their ASCII for str2 */
  local!mapofString2: a!forEach(
    items: enumerate(len(local!str2)),
    expression: a!map(id:local!str2[fv!item+1],ASCII:cast(1,code(local!str2[fv!item+1])))
  ),
/* Sorting the map data based on ASCII */
  local!datasetStr1: stripwith(tostring(fn!todatasubset(
    arrayToPage: local!mapofString1,
    pagingConfiguration: a!pagingInfo(
      startIndex: 1,
      batchSize: - 1,
      sort: a!sortInfo(field:"ASCII" , ascending: true)
    )
  ).data.id)," ; "),
/* Sorting the map data based on ASCII */
  local!datasetStr2: stripwith(tostring(fn!todatasubset(
    arrayToPage: local!mapofString2,
    pagingConfiguration: a!pagingInfo(
      startIndex: 1,
      batchSize: - 1,
      sort: a!sortInfo(field:"ASCII" , ascending: true)
    )
  ).data.id)," ; "),
/* Finally checking for Anagram */
  exact(local!datasetStr1,local!datasetStr2)
)

/* Q3 */

Reverse a string in Appian

joinarray(
  a!forEach(
    items: enumerate(len(ri!inpt)) + 1,
    expression: ri!inpt[(len(ri!inpt) - fv!index) + 1]
  )
)

/* Q4 */

Rename the string post removing the timestamp and date.
eg: 
input: "ANAND_JHA_BTECH_02081997_0626.pdf",
output: "ANAND_JHA_BTECH.pdf"

a!localVariables(
  local!val: split(ri!inpt, "_"),
  local!lenOfVal: length(local!val),
  local!fileName: remove(
    local!val,
    { local!lenOfVal, local!lenOfVal - 1 }
  ),
  concat(
    joinarray(local!fileName, "_"),".",
    index(
      split(
        index(local!val, local!lenOfVal, {}),
        "."
      ),
      2,
      {}
    )
  )
)


/* Q5 */
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Examples:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


a!localVariables(
  local!nums: { 3,2,4},
  local!target: 6,
  local!result: {},
  local!testResult: a!forEach(
    items: local!nums,
    expression: a!localVariables(
      local!i: fv!index,
      a!forEach(
        items: local!nums,
        expression: if(
          and(
            local!i < fv!index,
            local!nums[local!i] + fv!item = local!target
          ),
          append(local!result, { local!i, fv!index }),
          null
        )
      )
    )
  ),
 reject(fn!isnull,local!testResult)
  
  
)



/* Q6 */
Given an String or Number Check if it is Palindrome or Not.

You can return the answer in any order.

Input: N = 12321
Output: Palindrome
Explanation: 12321 is a Palindrome number because after reversing its digits, the number becomes 12321 which is same as the original number.

Input: String = ABDA
Output: Not a Palindrome
Explanation: ABDA is a  not a Palindrome because after reversing it becomes ADBA which is not same as the original string.

a!localVariables(
  local!input: "MADAM",
  local!reverseString: joinarray(
    a!forEach(
      items: enumerate(len(local!input)) + 1,
      expression: local!input[(len(local!input) - fv!index) + 1]
    )
  ),
  if(
    exact(local!input, local!reverseString),
    "Palindrome",
    "Not a Palindrome"
  )
)



/* Q7 */
Kâ€™th Smallest Element in Unsorted Array

Input: arr[] = {7, 10, 4, 3, 20, 15}, K = 3 
Output: 7
Input: arr[] = {7, 10, 4, 3, 20, 15}, K = 4 
Output: 10 

a!localVariables(
  local!array: { 3, 1, 4, 2, 6, 4 },
  local!sortedArray: todatasubset(
    a!forEach(
      items: local!array,
      expression: { value: fv!item }
    ),
    a!pagingInfo(
      1,
      - 1,
      a!sortInfo(field: "value", ascending: true)
    )
  ).data.value,
  cast(1, local!sortedArray[3])
)
